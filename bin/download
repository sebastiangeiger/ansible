#!/usr/bin/env ruby

require 'pp'

class DownloadFile
  def initialize(path)
    @path = path
  end
  def process!
    actions.each(&:call)
  end
  def urls
    @urls ||= IO.readlines(@path).map(&:strip).map{|line| URL.new(line)}
  end
  def actions
    urls.map do |url|
      RULES.best_fitting_for(url).action
    end
  end

  class URL
    require 'uri'
    require 'forwardable'
    extend Forwardable
    def_delegators :@url, :host
    def initialize(line)
      @url = URI.parse(line)
    end
    def full_url
      @url.to_s
    end
  end
end

class RULES
  def self.best_fitting_for(url)
    @rules.map{|rule| rule.new(url)}.sort{|rule_a,rule_b| rule_b.fitness <=> rule_a.fitness}.first
  end

  def self.<<(rule)
    @rules ||= []
    @rules << rule
  end
end

class Rule
  def initialize(url)
    @url = url
  end
  def fitness
    matches? ? priority : 0
  end
end

class YoutubeDownload < Rule
  def priority
    2
  end
  def matches?
    @url.host =~ /youtube\.com/
  end
  def action
    lambda {
      puts "Starting #{@url.full_url}"
      `youtube-dl -f 22 #{@url.full_url}`
      puts "Downloaded #{@url.full_url}"
    }
  end
end

class ArteDownload < Rule
  def priority
    2
  end
  def matches?
    @url.host =~ /arte\.tv/
  end
  def action
    lambda { puts "WOULD DOWNLOAD Arte #{@url.full_url}" }
  end
end

class AxelDownload < Rule
  def priority
    1
  end
  def matches?
    true
  end
  def download_limitation
    if Time.now.saturday? or Time.now.sunday?
      ""
    else
      "-s #{512*1024}"
    end
  end
  def action
    lambda do
      puts "Starting #{@url.full_url}"
      `axel -a #{download_limitation} -n 10 #{@url.full_url}`
      puts "Downloaded #{@url.full_url}"
    end
  end
end

RULES << AxelDownload
RULES << ArteDownload
RULES << YoutubeDownload

files = ARGV.select{|file| File.file? file}
if files.any?
  files = files.map{|file| DownloadFile.new(file)}
else
  exit "Usage: download FILE [FILE ...]"
end

files.each(&:process!)
